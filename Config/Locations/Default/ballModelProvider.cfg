// Parameters used by the BallModelProvider for local and remote ball model.
parameters = {

	// Specific parameters for the local ball model (BallModel).
	local = {
		// If a ball percept has at least this distance to all existing ball 
		// hypotheses, a new hypothesis is created with position from ball percept 
		// (distance in mm).
		Hypotheses_minDistanceForNewHypothesis = 500.0;
		
		/// Only hypotheses with at least this validity can become the best hypothesis 
		/// of a MultipleBallModel. If all hypotheses are below this threshold the 
		/// last best hypothesis is retained.
		Hypotheses_minValidityForChangingBestHypothesis = 0.25;
		
		// Defines the number of percepts/s which leads to a validity of 1.
		// No percept leads to a validity of 0.
		Validity_maxPerceptsPerSecond = 10;
		// Defines the number of percepts/s which is required for a valid hypothesis.
		Validity_minPerceptsPerSecond = 3;
		// Defines the number of percepts/s which is required for a good validity.
		Validity_goodPerceptsPerSecond = 6;
		// The percepts/s from the last second is merged with the previous validity
		// using a weighted mean. The last seconds percepts/s has weight 1 and this
		// parameter defines the weight of the previous validity.
		Validity_weightOfPreviousValidity = 80.0;
		// Same as Validity_weightOfPreviousValidity for hypotheses with at least 
		// Validity_goodPerceptsPerSecond.
		Validity_weightOfPreviousValidity_goodHypotheses = 150.0;
	};
	
	
	// Specific parameters for the remote ball model.
	remote = {
		// If a ball percept has at least this distance to all existing ball 
		// hypotheses, a new hypothesis is created with position from ball percept 
		// (distance in mm).
		Hypotheses_minDistanceForNewHypothesis = 1000.0;
		
		/// Only hypotheses with at least this validity can become the best hypothesis 
		/// of a MultipleBallModel. If all hypotheses are below this threshold the 
		/// last best hypothesis is retained.
		Hypotheses_minValidityForChangingBestHypothesis = 0.35;
		
		// Defines the number of percepts/s which leads to a validity of 1.
		// No percept leads to a validity of 0.
		Validity_maxPerceptsPerSecond = 10;
		// Defines the number of percepts/s which is required for a valid hypothesis.
		Validity_minPerceptsPerSecond = 3;
		// Defines the number of percepts/s which is required for a good validity.
		Validity_goodPerceptsPerSecond = 8;
		// The percepts/s from the last second is merged with the previous validity
		// using a weighted mean. The last seconds percepts/s has weight 1 and this
		// parameter defines the weight of the previous validity.
		Validity_weightOfPreviousValidity = 60.0;
		// Same as Validity_weightOfPreviousValidity for hypotheses with at least 
		// Validity_goodPerceptsPerSecond.
		Validity_weightOfPreviousValidity_goodHypotheses = 100.0;
	};
	
	
	// Use this validity for new ball hypotheses.
	Hypotheses_initialValidityForNewHypotheses = 0.2;
	
	// If two hypotheses are closer than Hypotheses_minDistanceForNewHypothesis
	// and the angle between their velocities is less than this parameter, one of 
	// them will be deleted during clean up (angle in radian).
	Hypotheses_minAngleForKeepingHypothesis = 0.7;
	// If the validity of a ball hypothesis is less than this threshold (and there 
	// is a better one), the hypothesis will be removed.
	Hypotheses_minValidityForKeepingHypothesis = 0.05;
	
	// Only hypotheses which had at least this amount of sensor updates are allowed to 
	// become the bestHypothesis.
	Hypotheses_minNumberOfSensorUpdatesForBestHypothesis = 2;
	// If the best hypothesis changes, the last ones validity is decreased by this value.
    Hypotheses_decreaseValidityOnChangingBestHypothesis = 0.1;
    
    // If true add a hypothesis at the kick off point when game state changes from SET 
    // to PLAYING.
	State_SetToPlaying_addKickOffHypothesis = true;
	
	// If true all ball hypotheses are removed after a penalty.
	State_Penalty_removeAllHypotheses = true;
};


// Parameters used by TeamBallModelProvider for merging local and remote
// ball models to team ball model.
teamParameters = {
	// This Validity (in range [0,1]) is at least required for the local 
	// ball model to believe it is correct.
	minValidityForLocalBallModel = 0.25;
	
	// This Validity (in range [0,1]) is at least required for the remote 
	// ball model (only other teammates) to believe it is correct.
	// The remote ball model is only used, if the local ball models 
	// validity is below \c minValidityForLocalBallModel.
	minValidityForRemoteBallModel = 0.25;
};


// Fix kalman filter matrices which are used to initialize the kalman filter of 
// each new ball hypothesis.
kalmanMatrices = {
	// The system matrix (A).
	systemMatrix = {
		cols = [ // column matrices!
			{ elems = [ 1, 0, 0, 0 ]; },
			{ elems = [ 0, 1, 0, 0 ]; },
			{ elems = [ 1, 0, 1, 0 ]; },
			{ elems = [ 0, 1, 0, 1 ]; }
		];
	};
	// The input matrix (B).
	inputMatrix = {
		cols = [ // column matrices??? strange
			{ elems = [ 0, 0 ]; },
			{ elems = [ 1, 0 ]; },
			{ elems = [ 0, 0 ]; },
			{ elems = [ 0, 1 ]; }
		];
	};
	// The measurement matrix (H).
	measurementMatrix = {
		cols = [ // column matrices??? strange
			{ elems = [ 1, 0, 0, 1 ]; },
			{ elems = [ 0, 0, 0, 0 ]; }
		]; 
	};
	
	// The process noise covariance matrix (Q).
	processNoiseCovarianceMatrix = {
		cols = [ // column matrices!
			{ elems = [ 1, 0, 1, 0 ]; },
			{ elems = [ 0, 1, 0, 1 ]; },
			{ elems = [ 1, 0, 1, 0 ]; },
			{ elems = [ 0, 1, 0, 1 ]; }
		];
	};
	// The measurement noise matrix (R).
	measurementNoiseMatrix = {
		cols = [ // column matrices!
			{ elems = [ 10, 0 ]; },
			{ elems = [ 0, 10 ]; }
		];
	};
};
